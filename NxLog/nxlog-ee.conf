########################################################################################
# Author:       Bhabesh Raj
# Description:  NxLog configuration for Windows
# Version:      0.2
# Modified at:  2020/03/09
# Note:         For use in Windows Server 2012 R2 and older,
#               remove the Defender and Security Mitigations channels
########################################################################################

# Lines starting with # is treated as comment and ignored by NxLog. 

# This configuration will forward logs to a Syslog Server in JSON format.
 
# This configuration file is loaded from its default location,
# or it can be explicitly specified with the -c command line argument.
 
# Directive names are case in-sensitive but arguments are
# case-sensitive in some cases.
 
Panic Soft
# This 'Panic' directive can take three different values: HARD, SOFT, or OFF.
# A panic condition is a critical state which usually indicates a bug.
# Assertions are used in NXLog code for checking conditions where the code
# will not work unless the asserted condition is satisfied, and for security.
# HARD will cause an abort in case the assertion fails.
# SOFT will cause an exception to be thrown at the place of the panic/assertion.
# The default value for Panic is SOFT. So the above line is only used for information.
 
define ROOT C:\Program Files\nxlog
# Define a variable ROOT to be used later on for dexterity.
# Please set the ROOT to the folder your Nxlog was installed into.
 
ModuleDir %ROOT%\modules
# By default the NXLog binaries have a compiled-in value for
# the directory to search for loadable modules.
# This can be overridden with this directive.
 
CacheDir %ROOT%\data
# This directive specifies a directory where the cache file (configcache.dat)
# should be written. This directive has a compiled-in value which is used by default.
 
SpoolDir %ROOT%\data
# NXLog will change its working directory to the value
# specified with this directive. This is useful with files created
# through relative filenames.
 
# Pidfile %ROOT%\data\nxlog.pid
# Under Unix operating systems, NXLog writes a PID file as
# other system daemons do.
# Ignored in case for Windows Environments.
 
# define CERTDIR %ROOT%\cert
# define CONFDIR %ROOT%\conf
# Only used incase of SSL/TLS data encrypted transfer.
 
define LOGDIR %ROOT%\data
define MYLOGFILE %LOGDIR%\nxlog.log
# Defining variables to be used later.
 
LogFile %MYLOGFILE%
# The LogFile directive sets a destination file for NXLog internal logs.

<Extension _syslog>
    Module xm_syslog
</Extension>
# The xm_syslog module exposes the parse_syslog() procedure,
# which will parse a BSD or IETF Syslog formatted raw event
# and create fields in the event record.
 
<Extension json>
    Module xm_json
</Extension>
# json module provides functions and procedures for processing
# data formatted as JSON.
 
<Input in_win>
    Module      im_msvistalog
<QueryXML>
 
<QueryList>
  <Query Id="0">
    <Select Path="Application">*</Select>
    <Select Path="Security">*</Select>
    <Select Path="System">*</Select>
    <Select Path="Setup">*</Select>
    <Select Path="Windows PowerShell">*</Select>
    <Select Path="Microsoft-Windows-Sysmon/Operational">*</Select>
    <Select Path="Microsoft-Windows-PowerShell/Operational">*</Select>
    <Select Path="Microsoft-Windows-Windows Defender/Operational">*</Select>
    <Select Path="Microsoft-Windows-Security-Mitigations/KernelMode">*</Select>
    <Select Path="Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational">*</Select>
    <Select Path="Microsoft-Windows-TerminalServices-LocalSessionManager/Operational">*</Select>
    <Select Path="Microsoft-Windows-Windows Firewall With Advanced Security/Firewall">*</Select>
    <Select Path="Microsoft-Windows-Shell-Core/Operational">*</Select>
    <Select Path="Microsoft-Windows-WMI-Activity/Operational">*</Select>
    <Select Path="Microsoft-Windows-AppLocker/MSI and Script">*</Select>
    <Select Path="Microsoft-Windows-AppLocker/EXE and DLL">*</Select>
    <Select Path="Microsoft-Windows-AppLocker/Packaged app-Deployment">*</Select>
    <Select Path="Microsoft-Windows-AppLocker/Packaged app-Execution">*</Select>
 </Query>
</QueryList>
 
</QueryXML>
</Input>

<Output out_win>
    Module om_tcp
    Host 192.168.1.100     # Place your Syslog Collector IP
    Port 514
    Exec to_json();$Message=$raw_event;to_syslog_bsd();
</Output>
 
# out_win will forward the logs the target central syslog
# server in JSON format.
 
<Route 1>
Path in_win => out_win
</Route>
# This route connects the in_win input to out_file output completing
# the pipeline.
