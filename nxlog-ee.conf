# This configuration file is loaded from its default location, 
# or it can be explicitly specified with the -c command line argument.
# Directive names are case insensitive but arguments are 
# case sensitive in some cases.
# This configuration file is exclusively targeted for Windows.

Panic Soft  
# A panic condition is a critical state which usually indicates a bug. 
# Assertions are used in NXLog code for checking conditions where the code 
# will not work unless the asserted condition is satisfied, and for security. 
# This directive can take three different values: HARD, SOFT, or OFF. 
# HARD will cause an abort in case the assertion fails.
# SOFT will cause an exception to be thrown at the place of the panic/assertion.
# The default value for Panic is SOFT. So the above line is only used for information.

define ROOT C:\Program Files\nxlog  
# Define a variable ROOT to be used later on for dexterity.
# Please set the ROOT to the folder your nxlog was installed into.

ModuleDir %ROOT%\modules
# By default the NXLog binaries have a compiled-in value for 
# the directory to search for loadable modules. 
# This can be overridden with this directive.

CacheDir  %ROOT%\data
# This directive specifies a directory where the cache file (configcache.dat)
#  should be written. This directive has a compiled-in value which is used by default.

SpoolDir  %ROOT%\data
# NXLog will change its working directory to the value 
# specified with this directive. This is useful with files created 
# through relative filenames.

#Pidfile %ROOT%\data\nxlog.pid
# Under Unix operating systems, NXLog writes a PID file as 
# other system daemons do. Ignored in case for Windows Environments.

# define CERTDIR %ROOT%\cert
# define CONFDIR %ROOT%\conf
# Only used incase of SSL/TLS data encrypted transfer.

define LOGDIR %ROOT%\data
define MYLOGFILE %LOGDIR%\nxlog.log
LogFile %MYLOGFILE%
# The LogFile directive sets a destination file for NXLog internal logs.

# <Extension _fileop>
    # Module  xm_fileop
# </Extension>
# _fileop extensions provides functions and procedures to manipulate files.
# E.g for log rotations and retentions.
# Include fileop while debugging.

<Extension _syslog>
    Module  xm_syslog
</Extension>
# The xm_syslog module exposes the parse_syslog() procedure, 
# which will parse a BSD or IETF Syslog formatted raw event 
# and create fields in the event record.

<Extension json>
    Module xm_json
</Extension>
# json module provides functions and procedures for processing
# data formatted as JSON.

<Input in_win>
    Module im_msvistalog
        Query <QueryList> \
            <Query Id="0"> \
                <Select Path="Application">*</Select> \
                <Select Path="System">*</Select> \
                <Select Path="Security">*</Select> \
            </Query> \
        </QueryList>
</Input> 
# This input section will use the im_msvistalog module to extract
# only the Application, System and Security event logs from Windows Server.

<Output out_file>
	Module		om_file
	File		'C:\outlog\output.txt'	
	CreateDir	True
	Exec to_json();$Message=$raw_event;to_syslog_bsd();
</Output>
# out_file will use the om_file module to write the output stream to 
# a local file.

#<Output out_win>
#    Module om_tcp
#        Host 192.168.81.140
#        Port 514
#        Exec to_json();$Message=$raw_event;to_syslog_bsd();
#</Output>
# Currently disabled, the out_win will send to the target central syslog
# server in json format.

<Route 1>
    Path in_win => out_file
</Route>
# This route connects the in_win input to out_file output completing
# the pipeline.